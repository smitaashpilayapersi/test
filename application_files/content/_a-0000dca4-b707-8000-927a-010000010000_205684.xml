<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<contentHaul xmlns:a="http://www.appian.com/ae/types/2009">
    <rule>
        <name>AB_shouldDisplayComponentPerParent</name>
        <uuid>_a-0000dca4-b707-8000-927a-010000010000_205684</uuid>
        <description>return true if component that is passed as input should be displayed, based on the value(s) captured for parent component</description>
        <parentUuid>_a-0000dc7c-e2e3-8000-927a-010000010000_199939</parentUuid>
        <visibility>
            <advertise>false</advertise>
            <hierarchy>true</hierarchy>
            <indexable>true</indexable>
            <quota>false</quota>
            <searchable>true</searchable>
            <system>false</system>
            <unlogged>false</unlogged>
        </visibility>
        <definition>with(
  /*Component that needs to be shown or hidden*/
  local!cfgComponent: ri!formData_cdt.componentList[ri!componentIndex],
  
  /*Parent condition*/
  local!cfgComponentParent: local!cfgComponent.parentList[ri!parentIndex],
  local!cfgComponentParentId: local!cfgComponentParent.parentComponentId,
  /* if any one of the values to the parent component trigger the current component */
  /* take a look at the values of the parent component */
  
  /*Parent components def*/
  local!parentComponent: if(
    #&quot;_a-0000da67-9c1b-8000-6ee0-010000010000_1083&quot;(
      local!cfgComponentParentId
    ),
    {},
    displayvalue(
      local!cfgComponentParentId,
      ri!formData_cdt.componentList.id,
      ri!formData_cdt.componentList,
      {}
    )
  ),
  
  /* If response type is section then we will not chk its value. */
  if(local!parentComponent.responseType = #&quot;_a-0000da69-8640-8000-6ee0-010000010000_1157&quot;,
   true(),
    with(
      local!ParentCmpntMultiVal: if(
    contains(
      #&quot;_a-0000da69-8640-8000-6ee0-010000010000_1148&quot;(),
      local!parentComponent.responseType
    ),
    true(),
    false()
  ),
  
  /*Value stored in parent def, with which we need to compare*/
  local!cfgComponentParentValueList: if(
    local!ParentCmpntMultiVal,
    touniformstring( split(
      index(
        local!cfgComponentParent,
        &quot;valueTxt&quot;,
        {}
      ),
      &quot;;&quot;
    )),
    index(
      local!cfgComponentParent,
      &quot;valueTxt&quot;,
      {}
    )
  ),
  
  /*Actual value entered by user in parent cmpnt*/
  local!parentComponentValues: if(
    contains(
      #&quot;eff69213-a672-4fa9-9d27-d6e7981bc8f0&quot;(),
      local!parentComponent.responseType
    ),
    fn!index(
      local!parentComponent,
      
      &quot;valueList&quot;,
      &quot;valueTxt&quot;,
      {}
    ),
    if(
        or(
          local!parentComponent.responseType = #&quot;_a-0000dac9-d9df-8000-927a-010000010000_68836&quot;,
          local!parentComponent.responseType = #&quot;_a-0000da69-8640-8000-6ee0-010000010000_1146&quot;),
           touniformstring(  split(
              fn!index(
                local!parentComponent,
                &quot;defaultValue&quot;,
                {}
              ),
              &quot;; &quot;
            )),
        fn!index(
          local!parentComponent,
          
          &quot;defaultValue&quot;,
          &quot;&quot;
        )
    )
    
  ),
  local!isParentValueMatched: if(
    fn!not(
      fn!isnull(
        local!cfgComponentParent.matchAnyValueFlag
      )
    ),
    (
      len(
        local!parentComponentValues
      ) &gt; 0
    ),
    if(
      or(
        fn!isnull(
          local!parentComponentValues
        ),
        length(
          local!parentComponentValues
        ) = 0,
        fn!isnull(
          local!cfgComponentParentValueList
        ),
        length(
          local!cfgComponentParentValueList
        ) = 0
      ),
      False,
      (
        length(
          wherecontains(
            local!parentComponentValues,
            local!cfgComponentParentValueList
          )
        ) &gt; 0
      )
    )
  ),
  /* if there is no parent or parent value matched with configured parent value */
  local!shouldDisplayComponent: or(
    fn!isnull(
      local!parentComponent
    ),
    local!isParentValueMatched
  ),
  local!shouldDisplayComponent
          
             
          
            
          
          
    )
  )
  
  
)</definition>
        <namedTypedValue>
            <name>formData_cdt</name>
            <type>
                <name>Variant</name>
                <namespace>http://www.appian.com/ae/types/2009</namespace>
            </type>
        </namedTypedValue>
        <namedTypedValue>
            <name>componentIndex</name>
            <type>
                <name>int</name>
                <namespace>http://www.w3.org/2001/XMLSchema</namespace>
            </type>
        </namedTypedValue>
        <namedTypedValue>
            <name>parentIndex</name>
            <type>
                <name>int</name>
                <namespace>http://www.w3.org/2001/XMLSchema</namespace>
            </type>
        </namedTypedValue>
        <preferredEditor>legacy</preferredEditor>
        <offlineEnabled>false</offlineEnabled>
    </rule>
    <roleMap public="true">
        <role allowForAll="false" inherit="true" name="readers">
            <users/>
            <groups/>
        </role>
        <role allowForAll="false" inherit="true" name="authors">
            <users/>
            <groups/>
        </role>
        <role allowForAll="false" inherit="true" name="administrators">
            <users/>
            <groups/>
        </role>
        <role allowForAll="false" inherit="false" name="denyReaders">
            <users/>
            <groups/>
        </role>
        <role allowForAll="false" inherit="false" name="denyAuthors">
            <users/>
            <groups/>
        </role>
        <role allowForAll="false" inherit="false" name="denyAdministrators">
            <users/>
            <groups/>
        </role>
    </roleMap>
</contentHaul>
