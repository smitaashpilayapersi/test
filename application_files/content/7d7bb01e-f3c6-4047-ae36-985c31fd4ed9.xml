<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<contentHaul xmlns:a="http://www.appian.com/ae/types/2009">
    <rule>
        <name>AB_GetGroupsForUserInAppDesign</name>
        <uuid>7d7bb01e-f3c6-4047-ae36-985c31fd4ed9</uuid>
        <description>This rule will return list of groups in which user is member</description>
        <parentUuid>_a-0000dc7c-e2e3-8000-927a-010000010000_199939</parentUuid>
        <visibility>
            <advertise>false</advertise>
            <hierarchy>true</hierarchy>
            <indexable>true</indexable>
            <quota>false</quota>
            <searchable>true</searchable>
            <system>false</system>
            <unlogged>false</unlogged>
        </visibility>
        <definition>/*with(&#xD;
  local!UserGroupIds: tointeger(&#xD;
    index(&#xD;
      a!queryEntity(&#xD;
        entity: cons!AB_ENTITY_TYPE_APP_DESIGN,&#xD;
        query: a!query(&#xD;
          selection: a!querySelection(&#xD;
            a!queryColumn( field: &quot;ViewerGroup&quot;)&#xD;
          ),&#xD;
          pagingInfo: a!pagingInfo(&#xD;
            startIndex: 1,&#xD;
            batchSize: - 1&#xD;
          )&#xD;
        )&#xD;
      ).data,&#xD;
      &quot;ViewerGroup&quot;,&#xD;
      &quot;&quot;&#xD;
    )&#xD;
  ),&#xD;
  if(&#xD;
    isusermemberofgroup(loggedInUser(),cons!AB_GRP_APP_BUILDER_ALERT_GROUP),&#xD;
    {local!UserGroupIds},&#xD;
    if(&#xD;
      isnull(local!UserGroupIds),&#xD;
      {tointeger(cons!AB_GRP_ALL_APPLICATION_USERS)},&#xD;
      tointeger(filter(&#xD;
        isusermemberofgroup(loggedInUser(),_),&#xD;
        local!UserGroupIds&#xD;
      ))&#xD;
    )&#xD;
  )&#xD;
)*/&#xD;
load(&#xD;
  local!groupIds:getgroupsformemberuser(loggedInUser()),&#xD;
  &#xD;
    if(&#xD;
    isusermemberofgroup(loggedInUser(),#&quot;_a-0000dc7c-e2e3-8000-927a-010000010000_199955&quot;),&#xD;
    append(local!groupIds,getmembergroups(#&quot;_a-0000dc91-0813-8000-927a-010000010000_201900&quot;)),&#xD;
    local!groupIds&#xD;
  )&#xD;
 &#xD;
  )</definition>
        <preferredEditor>legacy</preferredEditor>
        <offlineEnabled>false</offlineEnabled>
    </rule>
    <roleMap public="true">
        <role allowForAll="false" inherit="true" name="readers">
            <users/>
            <groups/>
        </role>
        <role allowForAll="false" inherit="true" name="authors">
            <users/>
            <groups/>
        </role>
        <role allowForAll="false" inherit="true" name="administrators">
            <users/>
            <groups/>
        </role>
        <role allowForAll="false" inherit="false" name="denyReaders">
            <users/>
            <groups/>
        </role>
        <role allowForAll="false" inherit="false" name="denyAuthors">
            <users/>
            <groups/>
        </role>
        <role allowForAll="false" inherit="false" name="denyAdministrators">
            <users/>
            <groups/>
        </role>
    </roleMap>
</contentHaul>
